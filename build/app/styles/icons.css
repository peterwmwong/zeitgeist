@charset "UTF-8";
/* ## Icons

Surface currently uses a font called [SS
Standard](http://symbolset.com/icons/standard) to display icons. The
really cool thing about this particular icon font is that it’s semantic.
That is, specific icons are mapped to whole words in addition to just
special Unicode glyphs.

The simplest way to add an icon within
Surface is to [look up the keyword for an
icon](/fonts/ss-standard/documentation.html) and then add the `.i-icon`
class to the element that contains the keyword:

```
<p class="i-icon">Logout</p>
```

This strategy is best when an icon’s keyword closes matches the concept
you are trying to convey. That way, if the icon doesn’t show up for some
reason, the underlying text would still make sense (this benefit also holds true for those
using screen readers).

However, in situations where you want to use an icon with a keyword that
<em>does not</em> align nicely with the concept you are trying to
convey, you’ll want to approach the markup a bit differently:

```
<p>
  <span class="i-icon">&#xED50;</span>
  <span class="t-screen-reader-text">Campaigns</span>
</p>
```

In the example above, we used the Unicode glyph `&#xED50` to display a
“list” icon. But obviously, if we didn’t provide some alternate text,
things could get a bit cryptic for screen readers (or in situations
where the icon fails to render.) With a little additional markup we can
provide fallback text that will be readable by assistive
devices, but that will only be visible if CSS is turned off.

Situations may arise where you’d like to use an icon without
having it appear as content within the DOM. It’s outside the scope of
this document to explain the reasons for doing this, but here’s an
example of how you might use such a method:

```
<ul>
  <li class="i-icon--before" data-icon="mail">Contact Us</li>
</ul>
```

In the event that you’d like to add icon support to your own custom
element you can do so by using the `@extend` directive native to
SASS, which is documented [here](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend).

In this particular case, simply add the line `@extends .i-icon;` to your
custom element’s  CSS declaration block.

*/
.i-icon, .i-icon--before:before {
  cursor: pointer;
  display: inline-block;
  font-family: "SS Standard";
  font-style: normal;
  font-weight: normal;
  text-decoration: none;
  text-rendering: optimizeLegibility;
  white-space: nowrap;
  padding-top: 2px;
  -webkit-font-feature-settings: "liga";
  -moz-font-feature-settings: "liga=1";
  -moz-font-feature-settings: "liga";
  -ms-font-feature-settings: "liga" 1;
  -o-font-feature-settings: "liga";
  font-feature-settings: "liga";
  -webkit-font-smoothing: antialiased; }

.i-icon--before {
  padding-left: 1.5em;
  position: relative; }

.i-icon--before:before {
  content: attr(data-icon);
  position: absolute;
  left: 0; }

/*# sourceMappingURL=icons.css.map */